#exp-8
import numpy as np
import matplotlib.pyplot as plt

def cal_pop_fitness(equation_inputs, pop):
    # Calculating the fitness value of each solution in the current population.
    # The fitness function calculates the sum of products between each input and its corresponding weight.
    fitness = np.sum(pop * equation_inputs, axis=1)
    return fitness

def select_mating_pool(pop, fitness, num_parents):
    # Selecting the best individuals in the current generation as parents for producing the offspring of the next generation.
    parents = np.empty((num_parents, pop.shape[1]))
    for parent_num in range(num_parents):
        max_fitness_idx = np.where(fitness == np.max(fitness))
        max_fitness_idx = max_fitness_idx[0][0]
        parents[parent_num, :] = pop[max_fitness_idx, :]
        fitness[max_fitness_idx] = -99999999999
    return parents

def crossover(parents, offspring_size):
    offspring = np.empty(offspring_size)
    # The point at which crossover takes place between two parents. Usually, it is at the center.
    crossover_point = np.uint8(offspring_size[1] / 2)
    for k in range(offspring_size[0]):
        # Index of the first parent to mate.
        parent1_idx = k % parents.shape[0]
        # Index of the second parent to mate.
        parent2_idx = (k + 1) % parents.shape[0]
        # The new offspring will have its first half of its genes taken from the first parent.
        offspring[k, 0:crossover_point] = parents[parent1_idx, 0:crossover_point]
        # The new offspring will have its second half of its genes taken from the second parent.
        offspring[k, crossover_point:] = parents[parent2_idx, crossover_point:]
    return offspring

def mutation(offspring_crossover, num_mutations=1):
    mutations_counter = np.uint8(offspring_crossover.shape[1] / num_mutations)
    # Mutation changes a number of genes as defined by the num_mutations argument. The changes are random.
    for idx in range(offspring_crossover.shape[0]):
        gene_idx = mutations_counter - 1
        for mutation_num in range(num_mutations):
            # The random value to be added to the gene.
            random_value = np.random.uniform(-1.0, 1.0, 1)
            offspring_crossover[idx, gene_idx] = offspring_crossover[idx, gene_idx] + random_value
            gene_idx = gene_idx + mutations_counter
    return offspring_crossover

# Inputs of the equation.
equation_inputs = [4, -2, 3.5, 5, -11, -4.7]
# Number of the weights we are looking to optimize.
num_weights = len(equation_inputs)
# Genetic algorithm parameters.
sol_per_pop = 8
num_parents_mating = 4
pop_size = (sol_per_pop, num_weights)  # The population will have sol_per_pop chromosomes where each chromosome has num_weights genes.

# Creating the initial population.
new_population = np.random.uniform(low=-4.0, high=4.0, size=pop_size)
print("Initial Population:")
print(new_population)

# Crossover
parents = select_mating_pool(new_population, cal_pop_fitness(equation_inputs, new_population), num_parents_mating)
offspring_crossover = crossover(parents, offspring_size=(pop_size[0] - parents.shape[0], num_weights))
print("\nCrossover:")
print(offspring_crossover)

# Mutation
offspring_mutation = mutation(offspring_crossover, num_mutations=2)
print("\nMutation:")
print(offspring_mutation)

# Creating the new population based on the parents and offspring.
new_population[0:parents.shape[0], :] = parents
new_population[parents.shape[0]:, :] = offspring_mutation

# Getting the best solution after iterating finishing all generations.
fitness = cal_pop_fitness(equation_inputs, new_population)
best_match_idx = np.where(fitness == np.max(fitness))
print("\nBest solution : ", new_population[best_match_idx, :])
print("Best solution fitness : ", fitness[best_match_idx])

# Plotting
plt.plot(fitness)
plt.xlabel("Iteration")
plt.ylabel("Fitness")
plt.title("Fitness over Generations")
plt.show()
