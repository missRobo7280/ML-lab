import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score 

# Load data from CSV file
msglbl_data = pd.read_csv('Statements_data.csv', names=['Message', 'Label'])

# Display total instances in the dataset
print("The Total instances in the Dataset:", msglbl_data.shape[0])

# Map labels to numerical values
msglbl_data['labelnum'] = msglbl_data.Label.map({'pos': 1, 'neg': 0})

# Place the data in X and Y vectors
X = msglbl_data["Message"]
Y = msglbl_data.labelnum

# Split the data into train and test sets
Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y)

# Vectorize the messages
count_vect = CountVectorizer()
Xtrain_dims = count_vect.fit_transform(Xtrain)
Xtest_dims = count_vect.transform(Xtest)

# Create and train the classifier
clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)
clf.fit(Xtrain_dims, Ytrain)

# Predictions on test data
prediction = clf.predict(Xtest_dims)

# Print accuracy metrics
print('******** Accuracy Metrics *********')
print('Accuracy:', accuracy_score(Ytest, prediction))
print('Recall:', recall_score(Ytest, prediction))
print('Precision:', precision_score(Ytest, prediction))
print('Confusion Matrix:\n', confusion_matrix(Ytest, prediction))
print(10 * "-")

# Predict input statement
test_stmt = [input("Enter any statement to predict:")]
test_dims = count_vect.transform(test_stmt)
pred = clf.predict(test_dims)

for stmt, lbl in zip(test_stmt, pred):
    if lbl == 1:
        print("Statement is Positive")
    else:
        print("Statement is Negative")
